<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, April 07, 2019, 12:58 AM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "Pyre_Helper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Pyre_Helper"
   author="Tamon"
   id="c74be251554149f1929c4d79"
   language="Lua"
   purpose="pyre helper plugin"
   date_written="2019-04-07 00:57:33"
   requires="5.06"
   version="2.4"
   save_state="y"
   >

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<script>
<![CDATA[

local async = require "async"
local url = require "socket.url"
local json = require('json')
local localData = nil
local remoteData = nil
local downloadsRequested = 0
local downloadsCompleted = 0
local Helper


-- ---------------------------------------------------- 
-- Helper Functions
-- ----------------------------------------------------
function file_exists(name)
    local f = io.open(name, "r")
    return f ~= nil and io.close(f)
end

function csplit(inputstr, sep)
    if sep == nil then sep = "%s" end
    local t = {}
    for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do table.insert(t, str) end
    return t
end

function getFileName(path)
        local fileParts = csplit(path, "/")
        local fileName = fileParts[table.getn(fileParts)]
        return fileName
end

function getFileExtension(path)
    local fileName = getFileName(path)
     local extParts = csplit(fileName,'.')
     return extParts[#extParts]
end

function getPluginName(path)
     local fileName = getFileName(path)
     local extParts = csplit(fileName,'.')
     return extParts[1]
end

function saveFile(path, data)
       local file = io.open(path, "w")
       file:write(data)
       file:flush()
       file:close()
end

function readFile(file)
    local f = assert(io.open(file, "rb"))
    local content = f:read("*all")
    f:close()
    return content
end

-- ---------------------------------------------------- 
-- Version / Downloader Functions
-- ----------------------------------------------------


function async_version_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        remoteData = json.decode(page)
    end
end

function async_xml_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        local fileParts = csplit(request_url, "/")
        local fileName = getFileName(request_url)
        local pluginName = getPluginName(fileName)

        local savePath = "worlds/plugins/" .. fileName
        saveFile(savePath, page)

        -- install or update the plugin
        local pluginFoundId = ''
        for _, pluginId in pairs (GetPluginList()) do 
            if (pluginName == GetPluginInfo(pluginId,1)) then
                pluginFoundId = pluginId
            end        
        end

        if (pluginFoundId == '') then
            LoadPlugin(savePath);
        else
            ReloadPlugin (pluginFoundId)
        end

    else
        print("error downloading")
    end
end

function async_lua_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        --command = "mkdir lua\\"
        --os.execute(command)
        local fileParts = csplit(request_url, "/")
        local fileName = getFileName(request_url)
        saveFile("lua/" .. fileName, page)
    else
        print("error downloading")
    end
end

function saveDownload(retval, page, status, headers, full_status, request_url)
   downloadsCompleted = downloadsCompleted + 1

   local fileParts = csplit(request_url, ".")
   local extension = fileParts[#fileParts]
    if (extension == "json") then
        async_version_download_complete(
            retval,
            page,
            status,
            headers,
            full_status,
            request_url
        )
    end
    if (extension == "lua") then
        async_lua_download_complete(
            retval,
            page,
            status,
            headers,
            full_status,
            request_url
        )
    end
    if (extension == "xml") then
        async_xml_download_complete(
            retval,
            page,
            status,
            headers,
            full_status,
            request_url
        )
    end
end

function download(url, completedCallback)
print('downloading ' .. url)
    downloadsRequested = downloadsRequested + 1
    async.doAsyncRemoteRequest(url, completedCallback, "HTTPS", 120)
end
            local function endsWith(str, ending)
            return ending == "" or str:sub(-#ending) == ending
            end

function checkVersionFile()

    if  (remoteData == nil) then
        download("https://raw.githubusercontent.com/thesmallbang/ascripts/master/version.json", 
        function(retval, page, status, headers, full_status, request_url) 
            saveDownload(retval, page, status, headers, full_status, request_url)
            checkVersionFile()
            return
        end)
        return
    end

    local localdata = GetVariable('ph_version')

    if  (localdata ~= nil) then
            localData = json.decode(localdata)
         else
            local tempData = remoteData
            tempData.downloaded = os.date()
            tempData.Features = {}
            SetVariable('ph_version', json.encode(tempData))
            localData = tempData
    end


    if (remoteData ~= nil and localData == nil) then
        localData = { Release = { Version = 0 }, Dependencies = {}, Features = {}}
    end

    if (tonumber(remoteData.Release.Version) ~= tonumber(GetPluginInfo(GetPluginID(), 19)) ) then
        download(remoteData.Release.Url, function(retval, page, status, headers, full_status, request_url) 
                saveDownload(retval, page, status, headers, full_status, request_url)
                localData.Release = remoteData.Release
                SetVariable('ph_version', json.encode(localData))
                print('Your main .xml was updated and requires you to "pyre reload" manually.')    
            end)
                return
    end


    for _, remoteDep in pairs(remoteData.Dependencies) do
        local found = false
        for _, localDep in pairs(localData.Dependencies) do


            -- only apply the following if we have the local dep installed
            if (localDep.Name == remoteDep.Name) then
                found = true
                
                -- is this file on disk?
                if (endsWith(remoteDep.Url,'.xml') and not (file_exists('worlds//plugins//' .. remoteDep.Name .. '.xml'))) then
                    -- we have the local dep configured but it is not on disk
                    found = false
                end

                if (endsWith(remoteDep.Url,'.lua') and not (file_exists('lua//' .. remoteDep.Name .. '.lua'))) then
                    -- we have the local dep configured but it is not on disk
                    found = false
                end

                if (remoteDep.Version ~= localDep.Version) then
                        download(remoteDep.Url, function(retval, page, status, headers, full_status, request_url) 
                            saveDownload(retval, page, status, headers, full_status, request_url)
                            localDep.Version = remoteDep.Version
                            localDep.Url = remoteDep.Url
                              SetVariable('ph_version', json.encode(localData))
                            checkVersionFile()
                        end)
                        return
                end

            end

        end

        if (found == false) then
            download(remoteDep.Url, function(retval, page, status, headers, full_status, request_url) 
            saveDownload(retval, page, status, headers, full_status, request_url)
            
            table.insert(localData.Dependencies, remoteDep)
            SetVariable('ph_version', json.encode(localData))
            
            checkVersionFile()
        end)
            return
        end
    end



    local features = {}

    for _, remoteDep in pairs(remoteData.Features) do
        local found = false

        for _, localDep in pairs(localData.Features) do

            -- only apply the following if we have the local dep installed
            if (localDep.Name == remoteDep.Name) then
                found = true
                table.insert(features,remoteDep)

                if (endsWith(remoteDep.Filename,'.lua') and not (file_exists('lua//' .. remoteDep.Filename))) then
                    -- we have the local dep configured but it is not on disk
                        download('https://raw.githubusercontent.com/thesmallbang/ascripts/master/' .. remoteDep.Filename, function(retval, page, status, headers, full_status, request_url) 
                            saveDownload(retval, page, status, headers, full_status, request_url)
                            localDep.Version = remoteDep.Version
                            localDep.Name = remoteDep.Name
                            localDep.Filename = remoteDep.Filename
                            localDep.Description = remoteDep.Description
                            SetVariable('ph_version', json.encode(localData))
                            checkVersionFile()
                        end)
                        return
                end

                if (remoteDep.Version ~= localDep.Version) then
                        download('https://raw.githubusercontent.com/thesmallbang/ascripts/master/' .. remoteDep.Filename, function(retval, page, status, headers, full_status, request_url) 
                            saveDownload(retval, page, status, headers, full_status, request_url)
                            localDep.Version = remoteDep.Version
                            localDep.Name = remoteDep.Name
                            localDep.Filename = remoteDep.Filename
                            localDep.Description = remoteDep.Description
                            SetVariable('ph_version', json.encode(localData))
                            checkVersionFile()
                        end)
                        return
                end
            end

        end

    end


    if(downloadsRequested > downloadsCompleted) then
        return
    end


    for _, dep in pairs(remoteData.Dependencies) do
        if (dep.Relay == "true") then
            Helper = require(dep.Name)
        end
    end

    if (Helper ~= nil) then
        Helper.Install(remoteData, features)
    end

end



-- ---------------------------------------------------- 
-- Relay to helper functions
-- ----------------------------------------------------

local tickLast = 0
local tickAt = 0.5

function OnPluginTick ()

    if (tickLast + tickAt < socket.gettime()) then
        tickLast = socket.gettime()
       if (Helper) then  Helper.Tick() end
    end
end

function OnPluginSaveState() if Helper then Helper.Save() end end

function OnPluginInstall() 
    checkVersionFile()
end

function OnPluginBroadcast(msg, id, name, text)
    if Helper then Helper.OnPluginBroadcast(msg, id, name, text) end
end

function OnPluginPacketReceived(sText)
end

function OnPluginDisable () if Helper then Helper.Stop() end end
function OnPluginEnable () if Helper then Helper.Start() end end
function OnPluginClose() if Helper then Helper.Stop() end end
function OnPluginDisconnect() if Helper then Helper.Stop() end end
function OnPluginCommandEntered (sText)  if Helper then Helper.ResetAfk() end end
function OnPluginCommandChanged ()   if Helper then Helper.ResetAfk() end end 

]]>


</script>


</muclient>
