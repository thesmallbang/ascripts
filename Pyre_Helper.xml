<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, April 07, 2019, 12:58 AM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "Pyre_Helper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Pyre_Helper"
   author="Tamon"
   id="c74be251554149f1929c4d75"
   language="Lua"
   purpose="pyre helper plugin"
   date_written="2019-04-07 00:57:33"
   requires="5.06"
   version="2.0"
   save_state="y"
   >

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<script>
<![CDATA[

local async = require "async"
local url = require "socket.url"
local json = require('json')
local localData = nil
local remoteData = nil
local downloadsRequested = 0
local downloadsCompleted = 0
local Helper


-- ---------------------------------------------------- 
-- Helper Functions
-- ----------------------------------------------------
function file_exists(name)
    local f = io.open(name, "r")
    return f ~= nil and io.close(f)
end

function csplit(inputstr, sep)
    if sep == nil then sep = "%s" end
    local t = {}
    for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do table.insert(t, str) end
    return t
end

function readAll(file)
    local f = assert(io.open(file, "rb"))
    local content = f:read("*all")
    f:close()
    return content
end

-- ---------------------------------------------------- 
-- Version / Downloader Functions
-- ----------------------------------------------------


function async_version_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        remoteData = json.decode(page)
        checkVersionFile()
    end
end

function async_xml_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        local fileParts = csplit(request_url, "/")
        local fileName = fileParts[table.getn(fileParts)]
        local extParts = csplit(fileName,'.')
        local pluginName = extParts[1]
        local savePath = "worlds/plugins/" .. fileName
        local file = io.open(savePath, "w")
        file:write(page)
        file:flush()
        file:close()

        -- install or update the plugin

        local pluginFoundId = ''

        for _, pluginId in pairs (GetPluginList()) do 
            if (pluginName == GetPluginInfo(pluginId,1)) then
                pluginFoundId = pluginId
            end        
        end

        if (pluginFoundId == '') then
            print('installing plugin')
            LoadPlugin(savePath);
        else
            print('reloading plugin')
            ReloadPlugin (pluginFoundId)
        end

    else
        print("error downloading")
    end
end

function async_lua_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        command = "mkdir lua\\"
        os.execute(command)
        local fileParts = csplit(request_url, "/")
        local fileName = fileParts[table.getn(fileParts)]
        local file = io.open("lua/" .. fileName, "w")
        file:write(page)
        file:flush()
        file:close()
       -- loadRequiredComponents()
    else
        print("error downloading")
    end
end

function saveDownload(retval, page, status, headers, full_status, request_url)

   print('download completed ' .. request_url)
   downloadsCompleted = downloadsCompleted + 1

   local fileParts = csplit(request_url, ".")
   local extension = fileParts[#fileParts]
    if (extension == "json") then
        async_version_download_complete(
            retval,
            page,
            status,
            headers,
            full_status,
            request_url
        )
        return
    end
    if (extension == "lua") then
        async_lua_download_complete(
            retval,
            page,
            status,
            headers,
            full_status,
            request_url
        )
        return
    end
    if (extension == "xml") then
        async_xml_download_complete(
            retval,
            page,
            status,
            headers,
            full_status,
            request_url
        )
        return
    end
   
end

function download(url)
    print('downloading ' ..url)
    downloadsRequested = downloadsRequested + 1
    async.doAsyncRemoteRequest(url, saveDownload, "HTTPS", 120)
end

function checkVersionFile()

    if  (remoteData == nil) then
        download("https://raw.githubusercontent.com/thesmallbang/ascripts/master/version.json")
        return
    end

    if  file_exists("worlds/plugins/pyreversion.json") then
         local filetext = readAll('worlds/plugins/pyreversion.json')
         localData = json.decode(filetext)
    end
    
    if (remoteData ~= nil and localData == nil) then
        localData = { release = { version = 0 }, dependencies = {}, features = {}}
    end

    local neededDependencies = {}
    for _, remoteDep in pairs(remoteData.dependencies) do
        local found = false
        for _, localDep in pairs(localData.dependencies) do
            if ((remoteDep.name == localDep.name) and ((tonumber(remoteDep.version) or 1) > (tonumber(localDep.version) or 0))) then
                found = true
            end
        end

        if (found == false) then
            download(remoteDep.url)
        end
    end

    if(downloadsRequested > downloadsCompleted) then
        print('still waiting')
        return
    end


    print('got it all')


end


-- ---------------------------------------------------- 
-- Relay to helper functions
-- ----------------------------------------------------



function OnPluginSaveState() if Helper then Helper.Save() end end

function OnPluginInstall() if Helper then Helper.OnInstall() end end

function OnPluginBroadcast(msg, id, name, text)
    if Helper then Helper.OnPluginBroadcast(msg, id, name, text) end
end

function OnPluginPacketReceived(sText)
end

function OnPluginClose() if Helper then Helper.OnStop() end end

function OnPluginDisconnect() if Helper then Helper.OnStop() end end



-- ---------------------------------------------------- 
-- Startup
-- ----------------------------------------------------


checkVersionFile()

    
]]>


</script>


</muclient>
