<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, April 07, 2019, 12:58 AM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "Pyre_Helper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Pyre_Helper"
   author="Tamon"
   id="c74be251554149f1929c4d75"
   language="Lua"
   purpose="pyre helper plugin"
   date_written="2019-04-07 00:57:33"
   requires="5.06"
   version="2.0"
   save_state="y"
   >

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<script>
<![CDATA[

local async = require "async"
local url = require "socket.url"
local json = require('json')
local localData = nil
local remoteData = nil
local downloadsRequested = 0
local downloadsCompleted = 0
local Helper


-- ---------------------------------------------------- 
-- Helper Functions
-- ----------------------------------------------------
function file_exists(name)
    local f = io.open(name, "r")
    return f ~= nil and io.close(f)
end

function csplit(inputstr, sep)
    if sep == nil then sep = "%s" end
    local t = {}
    for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do table.insert(t, str) end
    return t
end

function getFileName(path)
        local fileParts = csplit(path, "/")
        local fileName = fileParts[table.getn(fileParts)]
        return fileName
end

function getFileExtension(path)
    local fileName = getFileName(path)
     local extParts = csplit(fileName,'.')
     return extParts[#extParts]
end

function getPluginName(path)
     local fileName = getFileName(path)
     local extParts = csplit(fileName,'.')
     return extParts[1]
end

function saveFile(path, data)
       local file = io.open(path, "w")
       file:write(data)
       file:flush()
       file:close()
end

function readFile(file)
    local f = assert(io.open(file, "rb"))
    local content = f:read("*all")
    f:close()
    return content
end

-- ---------------------------------------------------- 
-- Version / Downloader Functions
-- ----------------------------------------------------


function async_version_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        remoteData = json.decode(page)
    end
end

function async_xml_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        local fileParts = csplit(request_url, "/")
        local fileName = getFileName(request_url)
        local pluginName = getPluginName(fileName)

        local savePath = "worlds/plugins/" .. fileName
        saveFile(savePath, page)

        -- install or update the plugin
        local pluginFoundId = ''
        for _, pluginId in pairs (GetPluginList()) do 
            if (pluginName == GetPluginInfo(pluginId,1)) then
                pluginFoundId = pluginId
            end        
        end

        if (pluginFoundId == '') then
            LoadPlugin(savePath);
        else
            ReloadPlugin (pluginFoundId)
        end

    else
        print("error downloading")
    end
end

function async_lua_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        --command = "mkdir lua\\"
        --os.execute(command)
        local fileParts = csplit(request_url, "/")
        local fileName = getFileName(request_url)
        saveFile("lua/" .. fileName, page)
    else
        print("error downloading")
    end
end

function saveDownload(retval, page, status, headers, full_status, request_url)
   downloadsCompleted = downloadsCompleted + 1

   local fileParts = csplit(request_url, ".")
   local extension = fileParts[#fileParts]
    if (extension == "json") then
        async_version_download_complete(
            retval,
            page,
            status,
            headers,
            full_status,
            request_url
        )
    end
    if (extension == "lua") then
        async_lua_download_complete(
            retval,
            page,
            status,
            headers,
            full_status,
            request_url
        )
    end
    if (extension == "xml") then
        async_xml_download_complete(
            retval,
            page,
            status,
            headers,
            full_status,
            request_url
        )
    end
   checkVersionFile()
end

function download(url)
print('downloading ' .. url)
    downloadsRequested = downloadsRequested + 1
    async.doAsyncRemoteRequest(url, saveDownload, "HTTPS", 120)
end
            local function endsWith(str, ending)
            return ending == "" or str:sub(-#ending) == ending
            end

function checkVersionFile()

    if  (remoteData == nil) then
        download("https://raw.githubusercontent.com/thesmallbang/ascripts/RefactoringPluginEvents/version.json")
        return
    end

    if  file_exists("worlds/plugins/pyreversion.json") then
         local filetext = readFile('worlds/plugins/pyreversion.json')
         localData = json.decode(filetext)
    end

    if (remoteData ~= nil and localData == nil) then
        localData = { Release = { Version = 0 }, Dependencies = {}, Features = {}}
    end

     remoteData.downloaded = os.date()
     saveFile("worlds/plugins/pyreversion.json",json.encode(remoteData))

    for _, remoteDep in pairs(remoteData.Dependencies) do
        local found = false
        for _, localDep in pairs(localData.Dependencies) do

            if (
            (
            endsWith(remoteDep.Url,'.xml') or (
            endsWith(remoteDep.Url,'.lua')
                and
            file_exists('lua//' .. remoteDep.Name .. '.lua')))
            and
            ((remoteDep.Name == localDep.Name) and ((tonumber(remoteDep.Version) or 1) == (tonumber(localDep.Version) or 0)))
            
            ) then
                found = true
            end
        end

        if (found == false) then
            download(remoteDep.Url)
            return
        end
    end

    if(downloadsRequested > downloadsCompleted) then
        return
    end

    local features = {}

    for _, dep in pairs(remoteData.Dependencies) do
        if (dep.Relay == "true") then
            Helper = require(dep.Name)
        end
    end

    for _, feature in pairs(localData.Features) do
        if file_exists('lua//' .. feature.Filename) then
            table.insert(features,feature)
        end
    end
    
    if (Helper) then
        Helper.Install(remoteData, foundFeatures)
        else
        print('helper was nothing')
    end

end


-- ---------------------------------------------------- 
-- Relay to helper functions
-- ----------------------------------------------------

local tickLast = 0
local tickAt = 0.5

function OnPluginTick ()

    if (tickLast + tickAt < socket.gettime()) then
        tickLast = socket.gettime()
       if (Helper) then  Helper.Tick() end
    end
end

function OnPluginSaveState() if Helper then Helper.Save() end end

function OnPluginInstall() 
    checkVersionFile()
end

function OnPluginBroadcast(msg, id, name, text)
    if Helper then Helper.OnPluginBroadcast(msg, id, name, text) end
end

function OnPluginPacketReceived(sText)
end

function OnPluginDisable () if Helper then Helper.Stop() end end
function OnPluginEnable () if Helper then Helper.Start() end end
function OnPluginClose() if Helper then Helper.Stop() end end
function OnPluginDisconnect() if Helper then Helper.Stop() end end
 
]]>


</script>


</muclient>
