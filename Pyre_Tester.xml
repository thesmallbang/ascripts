<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, April 07, 2019, 12:58 AM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "Pyre_Helper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Pyre_Tester"
   author="Tamon"
   id="c74be251554149f1929c4d73"
   language="Lua"
   purpose="pyre test plugin"
   date_written="2019-04-07 00:57:33"
   requires="5.06"
   version="1.0"
   save_state="y"
   >

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<script>
<![CDATA[

local async = require "async"
local url = require "socket.url"

local hadToDownload = false
local Helper
local requiredFiles = {
    [1] = {
        Name = "core.lua",
        Url = "https://raw.githubusercontent.com/thesmallbang/ascripts/master/core.lua",
        Found = -1,
        OnDownloaded = function(retval, page, status, headers, full_status, request_url)
            print("Downloaded core.lua")
            async_lua_download_complete(
                retval,
                page,
                status,
                headers,
                full_status,
                request_url
            )
        end
    },
    [2] = {
        Name = "skills.lua",
        Url = "https://raw.githubusercontent.com/thesmallbang/ascripts/master/skills.lua",
        Found = -1,
        OnDownloaded = function(retval, page, status, headers, full_status, request_url)
            print("Downloaded skills.lua")
            async_lua_download_complete(
                retval,
                page,
                status,
                headers,
                full_status,
                request_url
            )
        end
    },
    [3] = {
        Name = "scanner.lua",
        Url = "https://raw.githubusercontent.com/thesmallbang/ascripts/master/scanner.lua",
        Found = -1,
        OnDownloaded = function(retval, page, status, headers, full_status, request_url)
            print("Downloaded scanner.lua")
            async_lua_download_complete(
                retval,
                page,
                status,
                headers,
                full_status,
                request_url
            )
        end
    },
    [4] = {
        Name = "helper.lua",
        Url = "https://raw.githubusercontent.com/thesmallbang/ascripts/master/helper.lua",
        Found = -1,
        OnDownloaded = function(retval, page, status, headers, full_status, request_url)
            print("Downloaded helper.lua")
            async_lua_download_complete(
                retval,
                page,
                status,
                headers,
                full_status,
                request_url
            )
        end
    },
    [5] = {
        Name = "pyre_updater.xml",
        Url = "https://raw.githubusercontent.com/thesmallbang/ascripts/master/Pyre_Updater.xml",
        Found = -1,
        OnDownloaded = function(retval, page, status, headers, full_status, request_url)
            print("Downloaded pyre_updater.xml. You will need to reload this plugin manually before you can pyre update")
            async_xml_download_complete(
                retval,
                page,
                status,
                headers,
                full_status,
                request_url
            )
            if not(IsPluginInstalled ("c74be251554149f1929c4d74")) then
                LoadPlugin ("worlds/plugins/pyre_updater.xml")
            end

        end
    }
}

function file_exists(name)
    local f = io.open(name, "r")
    return f ~= nil and io.close(f)
end

function csplit(inputstr, sep)
    if sep == nil then sep = "%s" end
    local t = {}
    for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do table.insert(t, str) end
    return t
end

function async_xml_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        local fileParts = csplit(request_url, "/")
        local fileName = fileParts[table.getn(fileParts)]
        local file = io.open("worlds/plugins/" .. fileName, "w")
        file:write(page)
        file:flush()
        file:close()
        loadRequiredComponents()
    else
        print("error downloading")
    end
end
function async_lua_download_complete(retval, page, status, headers, full_status, request_url)
    if status == 200 then
        command = "mkdir lua\\pyre"
        os.execute(command)
        local fileParts = csplit(request_url, "/")
        local fileName = fileParts[table.getn(fileParts)]
        local file = io.open("lua/pyre/" .. fileName, "w")
        file:write(page)
        file:flush()
        file:close()
        loadRequiredComponents()
    else
        print("error downloading")
    end
end

function loadRequiredComponents()
    local anyMissing = false

    for _, file in ipairs(requiredFiles) do
        if (file_exists("lua/pyre/" .. file.Name) or file_exists("worlds/plugins/" .. file.Name)) then
            file.FoundState = 1
        else
            hadToDownload = true
            anyMissing = true
            file.FoundState = 0
            async.doAsyncRemoteRequest(file.Url, file.OnDownloaded, "HTTPS", 120)
            return
        end
    end

    if anyMissing == false then
        if hadToDownload then
            print("Required components have been downloaded.")
            Helper = require("pyre.helper")
        else
            Helper = require("pyre.helper")
        end
    end

end

function OnPluginSaveState() if Helper then Helper.Save() end end

function OnPluginInstall() if Helper then Helper.OnInstall() end end

function OnPluginBroadcast(msg, id, name, text)
    if Helper then Helper.OnPluginBroadcast(msg, id, name, text) end
end

function OnPluginPacketReceived(sText) if Helper then Helper.Tick() end end

function OnPluginClose() if Helper then Helper.OnStop() end end

function OnPluginDisconnect() if Helper then Helper.OnStop() end end

if IsPluginInstalled ("c74be251554149f1929c4d74") then
UnloadPlugin("Pyre_Helper")
end


loadRequiredComponents()

    
]]>


</script>


</muclient>
